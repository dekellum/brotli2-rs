var N=null,E="",T="t",U="u",searchIndex={};
var R=["brotliencoder","get_ref","Acquires a reference to the underlying stream","get_mut","Acquires a mutable reference to the underlying stream","into_inner","brotli2","Compress input data, ensuring that all input so far has…","Finished","compressparams","decompress","destatus","compress","costatus","take_output","BrotliEncoder","BrotliDecoder","from_params","brotlidecoder","Unwrap the underlying writer, finishing the compression…","Create a new compression stream which will compress at the…","Creates a new encoder with a custom `CompressParams`.","result","Acquires a reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","to_owned","clone_into","try_from","try_into","borrow_mut","brotli2::bufread","type_id","brotli2::raw","borrow","typeid","brotli2::read","brotli2::write","compressop","compressmode","formatter","CompressMode","CompressOp","CoStatus","DeStatus","Decompress","Compress","CompressParams"];

searchIndex["brotli2"]={"doc":"Brotli Compression/Decompression for Rust","i":[[3,R[46],R[6],"Parameters passed to various compression routines.",N,N],[4,R[40],E,"Possible choices for modes of compression",N,N],[13,"Generic",E,"Default compression mode, the compressor does not know…",0,N],[13,"Text",E,"Compression mode for utf-8 formatted text input.",0,N],[13,"Font",E,"Compression mode in WOFF 2.0.",0,N],[0,"bufread",E,"I/O streams for wrapping `BufRead` types as…",N,N],[3,R[15],R[30],"A brotli encoder, or compressor.",N,N],[3,R[16],E,"A brotli decoder, or decompressor.",N,N],[11,"new",E,"Creates a new encoder which will read uncompressed data…",1,[[["u32"],["r"]],[R[0]]]],[11,R[17],E,R[21],1,[[[R[9]],["r"]],[R[0]]]],[11,R[1],E,R[2],1,[[["self"]],["r"]]],[11,R[3],E,R[4],1,[[["self"]],["r"]]],[11,R[5],E,"Consumes this encoder, returning the underlying reader.",1,[[],["r"]]],[11,"new",E,"Creates a new decoder which will decompress data read from…",2,[[["r"]],[R[18]]]],[11,R[1],E,R[2],2,[[["self"]],["r"]]],[11,R[3],E,R[4],2,[[["self"]],["r"]]],[11,R[5],E,"Consumes this decoder, returning the underlying reader.",2,[[],["r"]]],[0,"raw",R[6],"Raw interface to in-memory compression/decompression streams",N,N],[3,R[44],R[32],"In-memory state for decompressing brotli-encoded data.",N,N],[3,R[45],E,"In-memory state for compressing/encoding data with brotli",N,N],[3,"Error",E,"Error that can happen from decompressing or compressing a…",N,N],[4,R[41],E,"Possible choices for the operation performed by the…",N,N],[13,"Process",E,"Compress input data",3,N],[13,"Flush",E,R[7],3,N],[13,"Finish",E,R[7],3,N],[13,"EmitMetadata",E,"Emit a metadata block to the stream, an opaque piece of…",3,N],[4,R[42],E,"Indication of whether a compression operation is…",N,N],[13,R[8],E,"The operation completed successfully",4,N],[13,"Unfinished",E,"The operation has more work to do and needs to be called…",4,N],[4,R[43],E,"Possible status results returned from decompressing.",N,N],[13,R[8],E,"Decompression was successful and has finished",5,N],[13,"NeedInput",E,"More input is needed to continue",5,N],[13,"NeedOutput",E,"More output is needed to continue",5,N],[5,"decompress_buf",E,"Decompress data in one go in memory.",N,[[],[["error"],[R[22],["usize","error"]],["usize"]]]],[5,"compress_buf",E,"Compresses the data in `input` into `output`.",N,[[[R[9]]],[["error"],[R[22],["usize","error"]],["usize"]]]],[11,"new",E,"Creates a new brotli decompression/decoding stream ready…",6,[[],[R[10]]]],[11,R[10],E,"Decompress some input data and write it to a buffer of…",6,[[["self"]],[["error"],[R[11]],[R[22],[R[11],"error"]]]]],[11,R[14],E,"Retrieve a slice of the internal decompressor buffer up to…",6,[[["self"],["option",["usize"]],["usize"]],["option"]]],[11,"new",E,"Creates a new compressor ready to encode data into brotli",7,[[],[R[12]]]],[11,R[12],E,"Pass some input data to the compressor and write it to a…",7,[[["self"],[R[37]]],[[R[13]],["error"],[R[22],[R[13],"error"]]]]],[11,R[14],E,"Retrieve a slice of the internal compressor buffer up to…",7,[[["self"],["option",["usize"]],["usize"]],["option"]]],[11,"set_params",E,"Configure the parameters of this compression session.",7,[[["self"],[R[9]]]]],[0,"read",R[6],"Reader-based compression/decompression streams",N,N],[3,R[15],R[35],"A compression stream which wraps an uncompressed stream of…",N,N],[3,R[16],E,"A decompression stream which wraps a compressed stream of…",N,N],[11,"new",E,R[20],8,[[["u32"],["r"]],[R[0]]]],[11,R[17],E,"Configure the compression parameters of this encoder.",8,[[[R[9]],["r"]],[R[0]]]],[11,R[1],E,R[2],8,[[["self"]],["r"]]],[11,R[3],E,R[4],8,[[["self"]],["r"]]],[11,R[5],E,R[19],8,[[],["r"]]],[11,"new",E,"Create a new decompression stream, which will read…",9,[[["r"]],[R[18]]]],[11,R[1],E,R[2],9,[[["self"]],["r"]]],[11,R[3],E,R[4],9,[[["self"]],["r"]]],[11,R[5],E,R[19],9,[[],["r"]]],[0,"write",R[6],"Writer-based compression/decompression streams",N,N],[3,R[15],R[36],"A compression stream which will have uncompressed data…",N,N],[3,R[16],E,"A compression stream which will have compressed data…",N,N],[11,"new",E,R[20],10,[[["w"],["u32"]],[R[0]]]],[11,R[17],E,R[21],10,[[["w"],[R[9]]],[R[0]]]],[11,R[1],E,R[23],10,[[["self"]],["w"]]],[11,R[3],E,R[24],10,[[["self"]],["w"]]],[11,"finish",E,"Consumes this encoder, flushing the output stream.",10,[[],[R[22]]]],[11,"new",E,"Creates a new decoding stream which will decode all input…",11,[[["w"]],[R[18]]]],[11,R[1],E,R[23],11,[[["self"]],["w"]]],[11,R[3],E,R[24],11,[[["self"]],["w"]]],[11,"finish",E,R[19],11,[[["self"]],[R[22]]]],[11,"new",R[6],"Creates a new default set of compression parameters.",12,[[],[R[9]]]],[11,"mode",E,"Set the mode of this compression.",12,[[["self"],[R[38]]],[R[9]]]],[11,"quality",E,"Controls the compression-speed vs compression-density…",12,[[["self"],["u32"]],[R[9]]]],[11,"lgwin",E,"Sets the base 2 logarithm of the sliding window size.",12,[[["self"],["u32"]],[R[9]]]],[11,"lgblock",E,"Sets the base 2 logarithm of the maximum input block size.",12,[[["self"],["u32"]],[R[9]]]],[11,"get_lgblock_readable",E,"Get the current block size",12,[[["self"]],["usize"]]],[11,"get_lgblock",E,"Get the native lgblock size",12,[[["self"]],["u32"]]],[11,"get_lgwin_readable",E,"Get the current window size",12,[[["self"]],["usize"]]],[11,"get_lgwin",E,"Get the native lgwin value",12,[[["self"]],["u32"]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[25],E,E,12,[[["self"]],[T]]],[11,R[26],E,E,12,[[["self"],[T]]]],[11,"into",E,E,12,[[],[U]]],[11,R[27],E,E,12,[[[U]],[R[22]]]],[11,R[28],E,E,12,[[],[R[22]]]],[11,R[29],E,E,12,[[["self"]],[T]]],[11,R[33],E,E,12,[[["self"]],[T]]],[11,R[31],E,E,12,[[["self"]],[R[34]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[26],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[27],E,E,0,[[[U]],[R[22]]]],[11,R[28],E,E,0,[[],[R[22]]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[["self"]],[T]]],[11,R[31],E,E,0,[[["self"]],[R[34]]]],[11,"from",R[30],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[27],E,E,1,[[[U]],[R[22]]]],[11,R[28],E,E,1,[[],[R[22]]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[["self"]],[T]]],[11,R[31],E,E,1,[[["self"]],[R[34]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[27],E,E,2,[[[U]],[R[22]]]],[11,R[28],E,E,2,[[],[R[22]]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[["self"]],[T]]],[11,R[31],E,E,2,[[["self"]],[R[34]]]],[11,"from",R[32],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[27],E,E,6,[[[U]],[R[22]]]],[11,R[28],E,E,6,[[],[R[22]]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[["self"]],[T]]],[11,R[31],E,E,6,[[["self"]],[R[34]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[27],E,E,7,[[[U]],[R[22]]]],[11,R[28],E,E,7,[[],[R[22]]]],[11,R[29],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,[[["self"]],[T]]],[11,R[31],E,E,7,[[["self"]],[R[34]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"to_string",E,E,13,[[["self"]],["string"]]],[11,R[25],E,E,13,[[["self"]],[T]]],[11,R[26],E,E,13,[[["self"],[T]]]],[11,"into",E,E,13,[[],[U]]],[11,R[27],E,E,13,[[[U]],[R[22]]]],[11,R[28],E,E,13,[[],[R[22]]]],[11,R[29],E,E,13,[[["self"]],[T]]],[11,R[33],E,E,13,[[["self"]],[T]]],[11,R[31],E,E,13,[[["self"]],[R[34]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[26],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[27],E,E,3,[[[U]],[R[22]]]],[11,R[28],E,E,3,[[],[R[22]]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[["self"]],[T]]],[11,R[31],E,E,3,[[["self"]],[R[34]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[26],E,E,4,[[["self"],[T]]]],[11,"into",E,E,4,[[],[U]]],[11,R[27],E,E,4,[[[U]],[R[22]]]],[11,R[28],E,E,4,[[],[R[22]]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[["self"]],[T]]],[11,R[31],E,E,4,[[["self"]],[R[34]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[26],E,E,5,[[["self"],[T]]]],[11,"into",E,E,5,[[],[U]]],[11,R[27],E,E,5,[[[U]],[R[22]]]],[11,R[28],E,E,5,[[],[R[22]]]],[11,R[29],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[["self"]],[T]]],[11,R[31],E,E,5,[[["self"]],[R[34]]]],[11,"from",R[35],E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[27],E,E,8,[[[U]],[R[22]]]],[11,R[28],E,E,8,[[],[R[22]]]],[11,R[29],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,[[["self"]],[T]]],[11,R[31],E,E,8,[[["self"]],[R[34]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[27],E,E,9,[[[U]],[R[22]]]],[11,R[28],E,E,9,[[],[R[22]]]],[11,R[29],E,E,9,[[["self"]],[T]]],[11,R[33],E,E,9,[[["self"]],[T]]],[11,R[31],E,E,9,[[["self"]],[R[34]]]],[11,"from",R[36],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[27],E,E,10,[[[U]],[R[22]]]],[11,R[28],E,E,10,[[],[R[22]]]],[11,R[29],E,E,10,[[["self"]],[T]]],[11,R[33],E,E,10,[[["self"]],[T]]],[11,R[31],E,E,10,[[["self"]],[R[34]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[27],E,E,11,[[[U]],[R[22]]]],[11,R[28],E,E,11,[[],[R[22]]]],[11,R[29],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,[[["self"]],[T]]],[11,R[31],E,E,11,[[["self"]],[R[34]]]],[11,"drop",R[32],E,6,[[["self"]]]],[11,"drop",E,E,7,[[["self"]]]],[11,"drop",R[36],E,10,[[["self"]]]],[11,"drop",E,E,11,[[["self"]]]],[11,"clone",R[32],E,3,[[["self"]],[R[37]]]],[11,"clone",E,E,13,[[["self"]],["error"]]],[11,"clone",E,E,4,[[["self"]],[R[13]]]],[11,"clone",E,E,5,[[["self"]],[R[11]]]],[11,"clone",R[6],E,0,[[["self"]],[R[38]]]],[11,"clone",E,E,12,[[["self"]],[R[9]]]],[11,"eq",R[32],E,3,[[["self"],[R[37]]],["bool"]]],[11,"eq",E,E,13,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,13,[[["self"],["error"]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[13]]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[11]]],["bool"]]],[11,"eq",R[6],E,0,[[["self"],[R[38]]],["bool"]]],[11,"fmt",R[32],E,13,[[["self"],[R[39]]],[R[22]]]],[11,"fmt",E,E,3,[[["self"],[R[39]]],[R[22]]]],[11,"fmt",E,E,13,[[["self"],[R[39]]],[R[22]]]],[11,"fmt",E,E,4,[[["self"],[R[39]]],[R[22]]]],[11,"fmt",E,E,5,[[["self"],[R[39]]],[R[22]]]],[11,"fmt",R[6],E,0,[[["self"],[R[39]]],[R[22]]]],[11,"fmt",E,E,12,[[["self"],[R[39]]],[R[22]]]],[11,"description",R[32],E,13,[[["self"]],["str"]]],[11,"write",R[36],E,10,[[["self"]],[[R[22],["usize"]],["usize"]]]],[11,"flush",E,E,10,[[["self"]],[R[22]]]],[11,"write",E,E,11,[[["self"]],[[R[22],["usize"]],["usize"]]]],[11,"flush",E,E,11,[[["self"]],[R[22]]]],[11,"read",R[30],E,1,[[["self"]],[[R[22],["usize"]],["usize"]]]],[11,"read",E,E,2,[[["self"]],[[R[22],["usize"]],["usize"]]]],[11,"read",R[35],E,8,[[["self"]],[[R[22],["usize"]],["usize"]]]],[11,"read",E,E,9,[[["self"]],[[R[22],["usize"]],["usize"]]]]],"p":[[4,R[40]],[3,R[15]],[3,R[16]],[4,R[41]],[4,R[42]],[4,R[43]],[3,R[44]],[3,R[45]],[3,R[15]],[3,R[16]],[3,R[15]],[3,R[16]],[3,R[46]],[3,"Error"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);